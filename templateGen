#!/usr/bin/env python3

import datetime
import sys
import argparse
import os.path
import getpass

def generate_c(name, source_filepath, target_filepath):

	header_target_filepath = os.path.join(target_filepath, str(name) + '.h')
	source_target_filepath = os.path.join(target_filepath, str(name) + '.c')

	# Target files MUST not exist
	if os.path.isfile(header_target_filepath):
		print("Header file already exists")
		sys.exit(1)
	if os.path.isfile(source_target_filepath):
		print("Source file already exists")
		sys.exit(1)

	# Generate header
	header_source_filepath = os.path.join(source_filepath, "templates/c_module", "template.h")
	header=""
	try:
		with open(header_source_filepath, 'r') as f:
			header=f.read()
	except Exception:
		print(f"Template file '{header_source_filepath}' does not exist")
		sys.exit(1)

	header = header.replace("$ITEMNAME$", name.upper())
	header = header.replace("$itemname$", name.lower())
	header = header.replace("$time$",     datetime.date.today().strftime("%d/%m/%Y"))

	try:
		with open(header_target_filepath, 'w') as f:
			f.write(header)
	except Exception:
		print(f"Could not create '{header_target_filepath}'")
		sys.exit(1)

	# Generate source
	source_source_filepath = os.path.join(source_filepath, "templates/c_module", "template.c")
	source=""
	try:
		with open(source_source_filepath, 'r') as f:
			source=f.read()
	except Exception:
		print(f"Template file '{source_source_filepath}' does not exist")
		sys.exit(1)

	source = source.replace("$ITEMNAME$", name.upper())
	source = source.replace("$itemname$", name.lower())
	source = source.replace("$time$",     datetime.date.today().strftime("%d/%m/%Y"))

	try:
		with open(source_target_filepath, 'w') as f:
			f.write(source)
	except Exception:
		print(f"Could not create '{source_target_filepath}'")
		sys.exit(1)

def main():
	# Parse
	parser = argparse.ArgumentParser(description='Source code template generator')
	parser.add_argument('-n', '--name', required=True, help='The name of the new module.')
	parser.add_argument('-p', '--path', default=".",   help='The path of the new generated file[s].')
	parser.add_argument('-l', '--lang', dest='language', default='c', choices=['c', 'python'], help="Template type. Python is notsupported at the moment.")
	args = parser.parse_args()

	# Cli arguments
	name = args.name
	path = args.path
	language = args.language

	# Variables
	target_filepath = os.path.abspath(path)
	user = getpass.getuser()
	source_filepath = os.path.abspath(os.path.join("/home", user, ".config/templateGen"))

	# Genarate
	if language=='c':
		generate_c(name, source_filepath, target_filepath)
	elif language=='python':
		print("Not supported!")
		sys.exit(1)

if __name__=="__main__":
	main()
